{
	--[[	Community settings
	hostname_prefix:	Nodename prefix
		freifunk-abcdef123456 (hex-part is generated from node's MAC address)
	site_name:			Name of your community
	site_code:			Shortcode of your community
	]]
	hostname_prefix = 'FF-LUED-',
	site_name = 'Freifunk LÃ¼denscheid',
	site_code = 'ffls',

	opkg = {
		openwrt = 'http://openwrt.aachen.freifunk.net/%n/%v/%S/packages',
	},

	--[[	General network settings
	prefix4:			IPv4 range of your community
	prefix6:			IPv6 range of your community
		is also required for radvd

	We use our global unicast block  2a03:2260:114::/48 for IP routing. This prefix is ONLY used for the next node feature and is used in multiple layer 2 network segments.
	]]
	prefix4 = '172.20.0.0/16',
	prefix6 = '2a03:2260:120:400::/56',


	--[[	NTP settings
			Synchronize the time of the nodes
	timezone:			Timezone of your community
		http://wiki.openwrt.org/doc/uci/system#time.zones
	ntp_servers:		List of NTP-Servers to query. You can use any public and/or your private NTP-Servers of your community.
		http://www.pool.ntp.org/zone/de
	#############
	# NOTE: http://news.ntppool.org/2013/06/ipv6-monitoring-problems-for-g.html
	# > As you might know only "2.pool.ntp.org" (and 2.debian.pool.ntp.org, etc)
	# > returns AAAA records currently.
	#############
	 ]]
	timezone = 'CET-1CEST,M3.5.0,M10.5.0/3',
	ntp_servers = {'2.pool.ntp.org'},


config_mode = {
  owner = {
    obligatory = true
  }
},



-- configure ffls-debug
debugserver = {
    host = { 'fichtenfunk.servicebackup.de', 'freifunk.it-swf.de' },
    port = 1337,
    liveport = 1338,
},



	--[[	Wireless settings
	regdom:			IEEE 802.11 Regulatory Domain
		http://en.wikipedia.org/wiki/IEEE_802.11#Regulatory_domains_and_legal_compliance
	wifi24:			Wifi settings for 2.4 GHz frequency devices
	wifi5:			Wifi settings for 5 GHz frequency devices
		sub
	ssid:			Wifi name shown to the user (We recommend %site_code%.freifunk.net)
	channel:		Wifi channel to use
	htmode:			Specifies the channel width in 802.11n and 802.11ac mode, possible values are:
						HT20 (single 20MHz channel),
						HT40- (2x 20MHz channels, primary/control channel is upper, secondary channel is below)
						HT40+ (2x 20MHz channels, primary/control channel is lower, secondary channel is above).
						VHT20 / VHT40 / VHT80 / VHT160 (channel width in 802.11ac, extra channels are picked according to the specification)
		http://wiki.openwrt.org/doc/uci/wireless#common.options (-> htmode)
	mesh_ssid:		SSID of the mesh-interface, only used between nodes
	mesh_bssid:		BSSID of the mesh-interface
	                        The supplied default of ff:ff:ff:ff:ff:ff will not work.
	                        You'll need to replace it with randomly generated, non-broadcast BSSID!
	mesh_mcast_rate:	multicast rate of the mesh-interface
	]]
	regdom = 'DE',

	wifi24 = {
    -- Removes 802.11b compatibility for better performance
		supported_rates = {6000, 9000, 12000, 18000, 24000, 36000, 48000, 54000},
		basic_rate = {6000, 9000, 18000, 36000, 54000},
		channel = 13,
		htmode = 'HT20',
		ap = {
			ssid = 'Freifunk',
		},
		ibss = {
			ssid = 'fflsmesh',
			bssid = '02:ff:13:37:fe:07',
			mcast_rate = 6000,
			disabled=false,
		},
		mesh = {
			id = 'fflsmesh-wifi',
			mcast_rate = 6000,
			disabled = false,
		},
	},

	wifi5 = {
		channel = 64,
		htmode = 'HT20',
		ap = {
			ssid = 'Freifunk',
		},
		ibss = {
			ssid = 'fflsmesh',
			-- ACHTUNG: Subtile Unterschiede zur 2.4GHz bssid beachten!
			-- CA:F*E*:*52*:FF:AC:*52*
			bssid = '02:ff:13:37:fe:04',
			mcast_rate = 6000,
		},
		mesh = {
			id = 'fflsmesh-wifi',
			mcast_rate = 6000,
                        disabled = false,
		},
	},

	--[[	Next-Node
	next_node:		Howto reach the node you are currently connected to
			The node will always be reachable at that address, and it's the same on all nodes. Because next_node packets are redirected within the node itself, there will be no conflicts.
		sub
	ip4:			IPv4 Address to use
	ip6:			IPv6 Address to use
	mac:			MAC Address to use
		(TODO: What is the purpose of this MAC-Address here?)
	]]
	next_node = {
		ip4 = '172.20.254.254',
		ip6 = '2a03:2260:120:400::cafe',
		mac = '04:5c:85:12:ef:e0',
	},


	--[[	Gateway settings
	fastd_mesh_vpn:	fastd vpn settings
		https://projects.universe-factory.net/projects/fastd/wiki/User_manual
		sub
	methods:		encryption algorithms to use
		https://projects.universe-factory.net/projects/fastd/wiki/Methods
		When multiple method statements are given, the first one has the highest preference.
	mtu:			package size
	backbone:		fastd vpn gateways of your community
		sub
	limit:			Number of gateways each node connects to
		On startup, each node tries to connect to every gateway, and then chooses the number of 'limit' fastest gateways it could reach
	peers:			Gateways
		sub sub
	key:			public fastd key of your gateway
		https://github.com/tcatm/ecdsautils
	remotes:		List of fastd configuration strings to connect to your gateway server
	]]

mesh_on_lan = true,


    fastd_mesh_vpn = {
		      methods = {'salsa2012+umac'},
		      enabled = true,
		      mtu = 1406,
		      groups = {
				backbone_1 = {},
    				backbone = {
					    limit = 1,
					    peers = {
						     luedenscheid1 = {
						 	      key = 'd1e2fbfa5b2c319e8bbc4be13daf2ff73382295f96bcbe49a3659b731d539605',
							      remotes = {'"luedenscheid-1.freifunk-mk.de" port 10000'},
							     },

						     },
					   },
			       },

		      bandwidth_limit = {
					 enabled = false,
					 ingress = 4000,
					 egress = 400,
					},
		     },



roles = {
  default = 'meshnode',
  list = {
    'meshnode',
    'eventnode',
    'uplink',
    'test',
    'offloader',
    'custom',
  },
 },

--
--    	tunneldigger_mesh_vpn = {
--		mtu = 1364,
--		brokers = {'fftun0.rechenzentrum-mk.de:10000','fftun0.servcicebackup.de:10000'},
--		bandwidth_limit = {
--			enabled = false,
--			ingress = 8000,
--			egress = 500,
--		},
--



	--[[	Autoupdater settings
	branch:			Automatically update to this branch
	branches:		Available branches your community is publishing
		sub sub
	name:			Name of branch (is used when compiling images)
	mirrors:		List of urls where to find the firmware
		just serve the images on port 80 via http. a simple apache file-listing is enough.
		see: http://luebeck.freifunk.net/firmware/
	probability:	How often should a node search for updates
		1.0 - perform an update every hour
		0.5 - on average, perform an update every two hours
		0.0 - inhibit any automatic updates
	good_signatures:	How many signatures should be valid so the node decides to upgrade itself
	pubkeys:		public keys by developers used in manifest file of branch
		manifest file - see gluon readme
		$ make manifest GLUON_BRANCH=mybranch
		$ contrib/sign.sh $SECRETKEY.file images/sysupgrade/manifest

	]]
	autoupdater = {
		branch = 'stable',
			branches = {
				    stable = {
					      name = 'stable',
					      mirrors = {
								'http://fichtenfunk.servicebackup.de/FF-LUED/firmware/stable/sysupgrade/',
								'http://freifunk.it-swf.de/firmware/stable/sysupgrade/',

							},
					      good_signatures = 1,
						  probability = 1,
					      pubkeys = {
									
									'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
									'01aff79cb3079b5b343cdc099a342434f284329890230e0f23850a488570b8c2', -- AKA47
							},
					     },

                        itswf = {
                          name = 'itswf',
                          mirrors = {   
                                        'http://fichtenfunk.servicebackup.de/FF-LUED/firmware/itswf/sysupgrade/',
                                        'http://freifunk.it-swf.de/firmware/beta/sysupgrade/',
                                    },
                          good_signatures = 1,
                          probability = 1,
                          pubkeys = {
                                    'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
                                    '01aff79cb3079b5b343cdc099a342434f284329890230e0f23850a488570b8c2', -- AKA47
                                                        },
                                             },



               		beta = {
                          name = 'beta',
                          mirrors = {
					'http://fichtenfunk.servicebackup.de/FF-LUED/firmware/beta/sysupgrade/',
					'http://freifunk.it-swf.de/firmware/beta/sysupgrade/',
				    },
                          good_signatures = 1,
                          probability = 1,
                          pubkeys = {
                                    'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
                                    '01aff79cb3079b5b343cdc099a342434f284329890230e0f23850a488570b8c2', -- AKA47
                                                        },
                                             },

				    experimental = {
					      name = 'experimental',
						probability = 1,
					      mirrors = {
									'http://fichtenfunk.servicebackup.de/FF-LUED/firmware/experimental/sysupgrade/',
									'http://freifunk.it-swf.de/firmware/experimental/sysupgrade/',
							},
					      good_signatures = 1,
					      pubkeys = {
									'd02f8e60fb7a5069556500694ebe512b6017b01e9950476e4cfcf10d5130c296', -- JJX
									'01aff79cb3079b5b343cdc099a342434f284329890230e0f23850a488570b8c2', -- AKA47
							},
					           },
				   },
		   },



    roguenets_filter = {
        allowed_prefix4 = '172.20.0.0/16',
        allowed_prefix6 = '2a03:2260:120:400::/56',
},

}
